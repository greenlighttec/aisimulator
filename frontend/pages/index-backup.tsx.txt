import { useEffect, useRef, useState } from "react";
import { startSession, runStep } from "@/lib/api";

export default function Home() {
  const [name, setName] = useState("");
  const [prompt, setPrompt] = useState("");
  const [customInput, setCustomInput] = useState("");
  const [storyLog, setStoryLog] = useState<string[]>([]);
  const [backgroundUrl, setBackgroundUrl] = useState<string | null>(null);
  const [assistantId, setAssistantId] = useState("");
  const [threadId, setThreadId] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [started, setStarted] = useState(false);

  const storyRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    if (storyRef.current) {
      storyRef.current.scrollTop = storyRef.current.scrollHeight;
    }
  }, [storyLog]);

  const handleStart = async () => {
    setIsLoading(true);
    const res = await startSession({ name, prompt });
    setAssistantId(res.assistant_id);
    setThreadId(res.thread_id);
    setStoryLog(["Game started. What do you do next?"]);
    setStarted(true);
    setIsLoading(false);
  };

  const handleSubmit = async (message: string) => {
    if (!assistantId || !threadId) return;
    setIsLoading(true);
    setStoryLog((prev) => [...prev, `> ${message}`, ""]);
    setCustomInput("");

    const stream = await runStep({ assistant_id: assistantId, thread_id: threadId, message });
    const reader = stream?.getReader();
    const decoder = new TextDecoder("utf-8");
    let fullResponse = "";

    while (reader) {
      const { value, done } = await reader.read();
      if (done) break;
      const chunk = decoder.decode(value);
      fullResponse += chunk;
      setStoryLog((prev) => {
        const updated = [...prev];
        updated[updated.length - 1] += chunk;
        return updated;
      });
    }

    setIsLoading(false);
  };

  if (!started) {
    return (
      <main className="p-6 max-w-xl mx-auto space-y-4">
        <h1 className="text-2xl font-bold">AI Visual Novel</h1>
        <input
          placeholder="Your name"
          className="border px-3 py-2 w-full"
          value={name}
          onChange={(e) => setName(e.target.value)}
        />
        <input
          placeholder="Story prompt (e.g., haunted castle)"
          className="border px-3 py-2 w-full"
          value={prompt}
          onChange={(e) => setPrompt(e.target.value)}
        />
        <button onClick={handleStart} className="bg-blue-600 text-white px-4 py-2 rounded" disabled={isLoading}>
          {isLoading ? "Starting..." : "Start Game"}
        </button>
      </main>
    );
  }

  return (
    <div className="relative w-full h-screen overflow-hidden">
      {backgroundUrl && (
        <img src={backgroundUrl} alt="Background" className="absolute inset-0 w-full h-full object-cover z-0" />
      )}

      <div className="absolute bottom-0 left-0 right-0 z-10 bg-black bg-opacity-60 p-6 text-white text-lg leading-relaxed">
        <div ref={storyRef} className="max-h-64 overflow-y-auto whitespace-pre-wrap">
          {storyLog.map((line, idx) => (
            <div key={idx} className={line.startsWith(">") ? "italic text-gray-300" : "mt-2"}>{line}</div>
          ))}
        </div>

        <div className="mt-4 flex gap-2">
          <input
            className="flex-1 p-2 text-black rounded"
            placeholder="What do you do?"
            value={customInput}
            onChange={(e) => setCustomInput(e.target.value)}
            onKeyDown={(e) => e.key === "Enter" && handleSubmit(customInput)}
          />
          <button
            onClick={() => handleSubmit(customInput)}
            className="bg-blue-600 text-white px-4 py-2 rounded"
            disabled={isLoading || !customInput.trim()}
          >
            Go
          </button>
        </div>
      </div>
    </div>
  );
}
